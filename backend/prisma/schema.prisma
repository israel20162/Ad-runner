// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  username           String               @unique
  Ads                Ad[]
  // Add more user profile fields as needed (name, bio, profile picture URL, etc.)
  SocialMediaAccount SocialMediaAccount[]
  // Existing advertiser/promoter field (optional)
  userType           String?
  //Promoter specific information (optional, nested)
  promoter           Promoter?
  advertiser         Advertiser?
}

model Promoter {
  id                 Int        @id @default(autoincrement())
  userId             Int        @unique
  fullName           String
  contactInfo        String?
  bio                String?
  profilePicture     String?
  //  Promotion details
  promotionMethods   Json?
  targetAudience     Json?
  previousExperience String?
  promotionLinks     String?
  earnings           Int?
  // Optional payment information (consider security best practices)
  paymentMethod      String?
  // Connect to User model (one-to-one)
  user               User       @relation(fields: [userId], references: [id])
  campaigns          Campaign[]
}

model Ad {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String?
  // Add fields for ad details (budget, target audience, etc.)
  createdBy   Int
  createdAt   DateTime @default(now())

  author    User        @relation(fields: [createdBy], references: [id])
  Promotion Promotion[]
}

model Advertiser {
  id             Int        @id @default(autoincrement())
  userId         Int        @unique
  companyEmail   String     @unique
  password       String?
  firstName      String?
  lastName       String?
  companyName    String?
  contact        String?
  business_type  String?
  companyWebsite String?
  description    String?
  profilePicture String?
  balance        Int?
  user           User       @relation(fields: [userId], references: [id])
  campaigns      Campaign[]
  advertiserId   Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Campaign {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  startDate DateTime?
  endDate   DateTime?
  status    CampaignStatus

  description       String?
  imageUrl          String?
  videoUrl          String?
  clickUrl          String?
  promoterLimit     Int?
  filters           Json?
  platform          Json?
  pricesPerPlatform Json?
  pricesPerMetric   Json?
  promoters         Promoter[]

  // ... other relevant campaign fields

  creator   Advertiser @relation(fields: [creatorId], references: [id])
  creatorId Int

  impressions Int?
  clicks      Int?
  conversions Int?
  views       Int?
  likes       Int?
  earnings    Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CampaignStatus {
  Draft
  Active
  Completed
  Paused
  Cancelled
}

model SocialMediaAccount {
  id       Int    @id @default(autoincrement())
  platform String
  username String
  userId   Int
  // Add fields for access tokens or platform-specific information

  user      User        @relation(fields: [userId], references: [id])
  Promotion Promotion[]
}

model Promotion {
  id          Int       @id @default(autoincrement())
  adId        Int
  socialId    Int
  status      String
  completed   Boolean   @default(false)
  completedAt DateTime?
  price       Int
  // Add fields for tracking promotion details (metrics, reports, etc.)

  ad          Ad                 @relation(fields: [adId], references: [id])
  socialMedia SocialMediaAccount @relation(fields: [socialId], references: [id])
}
